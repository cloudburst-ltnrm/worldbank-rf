eerf$mig_perm_school <- as.factor(eerf$mig_perm_school)
eerf$mig_perm_land <- as.factor(eerf$mig_perm_land)
eerf$mig_perm_health <- as.factor(eerf$mig_perm_health)
eerf$mig_perm_hlpfmly <- as.factor(eerf$mig_perm_hlpfmly)
eerf$mig_perm_prison <- as.factor(eerf$mig_perm_prison)
# Total Household Income
eerf$hh_income <- ee$econinca
# There are 3 NA values, replace with mean, with some noise
# The SD > mean though..
eerf$hh_income[is.na(eerf$hh_income)] <- mean(jitter(eerf$hh_income), na.rm=TRUE)
#==================================================================================================
#==================================================================================================
# Data Checks
sink("ee_checks.txt")
library(plyr)
for (i in 1:ncol(eerf)) {
print(i)
print(class(eerf[, names(eerf)[i]]))
print(count(eerf, names(eerf)[i]))
print(" ")
}
sink()
# unlink("ee_checks.txt")
#==================================================================================================
#==================================================================================================
# Output
# These vars need to be removed, they have no variation
eerf$mig_perm_prison <- NULL
eerf$inc_polc2 <- NULL
eerf$inc_barber2 <- NULL
# eerf$lnd_cert1_husb_wife <- NULL
eerf$rice_prod <- NULL
eerf$rice_sold <- NULL
eerf$rice_give <- NULL
eerf$groundnuts_sold <- NULL
eerf$sesame_reci <- NULL
eerf$yam_give <- NULL
eerf$yam_reci <- NULL
eerf$apple_reci <- NULL
eerf$cotton_reci <- NULL
eerf$ginger_give <- NULL
eerf$mig_perm_prison <- NULL
write.csv(eerf, file = "rf_data.csv")
save(eerf, file = "rf_data.rdata")
#==================================================================================================
#==================================================================================================
# Ben Ewing - 3/15/2016
#
# This script is meant to demonstrate some of the capabilities of the Caret package, and the
# random forests method
#
#==================================================================================================
#==================================================================================================
# Setup
# Clear Environments
rm(list=ls())
# Set Working Directory
setwd("C:/Users/bewing/Documents/GitHub/worldbank-rf")
# Import data
load("datasets/usaid_data.rdata")
# Libraries
# Plyr has a number of useful functions
library(plyr)
# Caret of course
library(caret)
# ggplot2 for plots, ggthemes for nice themes
library(ggplot2)
library(ggthemes)
# randomForest for...random forests
library(randomForest)
#==================================================================================================
#==================================================================================================
# R Basics
# See the dimensions
# dim(eerf)
# 383 variables for 4332 observations
# see the first couple rows
# head(eerf)
# See variables and their types
# str(eerf, list.len = ncol(eerf))
# We have to specify how many vars to show using the list.len arg
# We can also get some basic stats, of course
# mean(eerf$hh_income)
# sd(eerf$hh_income)
# summary(eerf$hh_income)
#==================================================================================================
#==================================================================================================
# Set up testing data and training data
set.seed(3456)
trainIndex <- createDataPartition(y = eerf$parc_2cer_num, p = 0.8, list = F)
train_data <- eerf[trainIndex,]
test_data  <- eerf[-trainIndex,]
#==================================================================================================
#==================================================================================================
# for (i in 1:ncol(training)) {
#   print(names(training)[i])
#   if (class(training[, names(training)[i]])[1] == "factor")
#     contrasts(training[, names(training)[i]])
# }
#==================================================================================================
#==================================================================================================
# Training Model
# Basic - Use whichever variables you'd like to test here
mod_rf <- train(parc_2cer_num ~ state_id + hh_size + hh_num_male + hh_num_female +
hh_head_age + hh_avg_age + hh_ed_avg_yrs + inc_farm1 + inc_manual1 +
inc_domstc1 + lofftrtime + redland,
data = training,
trControl = trainControl(method="cv",number=5),
method = "rf")
#==================================================================================================
#==================================================================================================
# Evalutating the model on its own
# By just typing the model name, we can get some information
mod_rf
# Or to see some info about the final model, and particularly the confusion matrix
mod_rf$finalModel
#==================================================================================================
#==================================================================================================
# Evaluating our Model on Our Predictions
pred <- predict(mod_rf, testing)
confusionMatrix(pred, testing$parc_2cer_num)
testing$predRight <- pred==testing$parc_2cer_num
qplot(parc_2cer_num, fill=predRight, data=testing, main="",
xlab = "Second Level Certification") + theme_fivethirtyeight()
#==================================================================================================
#==================================================================================================
# Variable Importance
varImp(mod_rf)
# and
ggplot(varImp(mod_rf)) + theme_fivethirtyeight()
# or
plot(varImp(mod_rf))
#==================================================================================================
#==================================================================================================
# Ben Ewing - 3/15/2016
#
# This script is meant to demonstrate some of the capabilities of the Caret package, and the
# random forests method
#
#==================================================================================================
#==================================================================================================
# Setup
# Clear Environments
rm(list=ls())
# Set Working Directory
setwd("C:/Users/bewing/Documents/GitHub/worldbank-rf")
# Import data
load("datasets/usaid_data.rdata")
# Libraries
# Plyr has a number of useful functions
library(plyr)
# Caret of course
library(caret)
# ggplot2 for plots, ggthemes for nice themes
library(ggplot2)
library(ggthemes)
# randomForest for...random forests
library(randomForest)
#==================================================================================================
#==================================================================================================
# R Basics
# See the dimensions
# dim(eerf)
# 383 variables for 4332 observations
# see the first couple rows
# head(eerf)
# See variables and their types
# str(eerf, list.len = ncol(eerf))
# We have to specify how many vars to show using the list.len arg
# We can also get some basic stats, of course
# mean(eerf$hh_income)
# sd(eerf$hh_income)
# summary(eerf$hh_income)
#==================================================================================================
#==================================================================================================
# Set up testing data and training data
set.seed(3456)
trainIndex <- createDataPartition(y = eerf$parc_2cer, p = 0.8, list = F)
train_data <- eerf[trainIndex,]
test_data  <- eerf[-trainIndex,]
#==================================================================================================
#==================================================================================================
# for (i in 1:ncol(training)) {
#   print(names(training)[i])
#   if (class(training[, names(training)[i]])[1] == "factor")
#     contrasts(training[, names(training)[i]])
# }
#==================================================================================================
#==================================================================================================
# Training Model
# Basic - Use whichever variables you'd like to test here
mod_rf <- train(parc_2cer ~ state_id + hh_size + hh_num_male + hh_num_female +
hh_head_age + hh_avg_age + hh_ed_avg_yrs + inc_farm1 + inc_manual1 +
inc_domstc1 + lofftrtime + redland,
data = training,
trControl = trainControl(method="cv",number=5),
method = "rf")
#==================================================================================================
#==================================================================================================
# Evalutating the model on its own
# By just typing the model name, we can get some information
mod_rf
# Or to see some info about the final model, and particularly the confusion matrix
mod_rf$finalModel
#==================================================================================================
#==================================================================================================
# Evaluating our Model on Our Predictions
pred <- predict(mod_rf, testing)
confusionMatrix(pred, testing$parc_2cer)
testing$predRight <- pred==testing$parc_2cer
qplot(parc_2cer, fill=predRight, data=testing, main="",
xlab = "Second Level Certification") + theme_fivethirtyeight()
#==================================================================================================
#==================================================================================================
# Variable Importance
varImp(mod_rf)
# and
ggplot(varImp(mod_rf)) + theme_fivethirtyeight()
# or
plot(varImp(mod_rf))
#==================================================================================================
#==================================================================================================
# Ben Ewing - 3/15/2016
#
# This script is meant to demonstrate some of the capabilities of the Caret package, and the
# random forests method
#
#==================================================================================================
#==================================================================================================
# Setup
# Clear Environments
rm(list=ls())
# Set Working Directory
setwd("C:/Users/bewing/Documents/GitHub/worldbank-rf")
# Import data
load("datasets/usaid_data.rdata")
# Libraries
# Plyr has a number of useful functions
library(plyr)
# Caret of course
library(caret)
# ggplot2 for plots, ggthemes for nice themes
library(ggplot2)
library(ggthemes)
# randomForest for...random forests
library(randomForest)
#==================================================================================================
#==================================================================================================
# R Basics
# See the dimensions
# dim(eerf)
# 383 variables for 4332 observations
# see the first couple rows
# head(eerf)
# See variables and their types
# str(eerf, list.len = ncol(eerf))
# We have to specify how many vars to show using the list.len arg
# We can also get some basic stats, of course
# mean(eerf$hh_income)
# sd(eerf$hh_income)
# summary(eerf$hh_income)
#==================================================================================================
#==================================================================================================
# Set up testing data and training data
set.seed(3456)
trainIndex <- createDataPartition(y = eerf$parc_2cer, p = 0.8, list = F)
train_data <- eerf[trainIndex,]
test_data  <- eerf[-trainIndex,]
#==================================================================================================
#==================================================================================================
# for (i in 1:ncol(train_data)) {
#   print(names(train_data)[i])
#   if (class(train_data[, names(train_data)[i]])[1] == "factor")
#     contrasts(train_data[, names(train_data)[i]])
# }
#==================================================================================================
#==================================================================================================
# Training Model
# Basic - Use whichever variables you'd like to test here
mod_rf <- train(parc_2cer ~ state_id + hh_size + hh_num_male + hh_num_female +
hh_head_age + hh_avg_age + hh_ed_avg_yrs + inc_farm1 + inc_manual1 +
inc_domstc1 + lofftrtime + redland,
data = train_data,
trControl = trainControl(method="cv",number=5),
method = "rf")
#==================================================================================================
#==================================================================================================
# Evalutating the model on its own
# By just typing the model name, we can get some information
mod_rf
# Or to see some info about the final model, and particularly the confusion matrix
mod_rf$finalModel
#==================================================================================================
#==================================================================================================
# Evaluating our Model on Our Predictions
pred <- predict(mod_rf, test_data)
confusionMatrix(pred, test_data$parc_2cer)
test_data$predRight <- pred==test_data$parc_2cer
qplot(parc_2cer, fill=predRight, data=test_data, main="",
xlab = "Second Level Certification") + theme_fivethirtyeight()
#==================================================================================================
#==================================================================================================
# Variable Importance
varImp(mod_rf)
# and
ggplot(varImp(mod_rf)) + theme_fivethirtyeight()
# or
plot(varImp(mod_rf))
#==================================================================================================
qplot(parc_2cer, fill=predRight, data=test_data, main="",
xlab = "Second Level Certification") + theme_fivethirtyeight()
mod_rf <- train(parc_2cer ~ state_id + hh_size + hh_num_male + hh_num_female +
hh_head_age + hh_avg_age + hh_ed_avg_yrs + inc_farm1 + inc_manual1 +
inc_domstc1 + lofftrtime + redland,
data = train_data,
trControl = trainControl(method="cv",number=5),
metric = "Kappa",
method = "rf")
#==================================================================================================
#==================================================================================================
# Evalutating the model on its own
# By just typing the model name, we can get some information
mod_rf
# Or to see some info about the final model, and particularly the confusion matrix
mod_rf$finalModel
#==================================================================================================
#==================================================================================================
# Evaluating our Model on Our Predictions
pred <- predict(mod_rf, test_data)
confusionMatrix(pred, test_data$parc_2cer)
test_data$predRight <- pred==test_data$parc_2cer
qplot(parc_2cer, fill=predRight, data=test_data, main="",
xlab = "Second Level Certification") + theme_fivethirtyeight()
#==================================================================================================
# Variable Importance
varImp(mod_rf)
# and
ggplot(varImp(mod_rf)) + theme_fivethirtyeight()
# or
plot(varImp(mod_rf))
#==================================================================================================
rm(list=ls())
load(url("https://github.com/cloudburst-ltnrm/worldbank-rf/raw/master/datasets/usaid_data.rdata"))
eerf$hh_income
qplot(eerf$vil_id, eerf$hh_income, geom = "jitter")
qplot(eerf$region_id, eerf$hh_income, geom = "jitter")
qplot(eerf$region_id, eerf$hh_income)
qplot(eerf$region_id, eerf$hh_income, geom = "bar")
qplot(eerf$region_id, eerf$hh_income, geom = "jitter")
system.time(mod_rpart <- train(parc_2cer_num ~ state_id + hh_size + hh_num_male + hh_num_female +
hh_head_age + hh_avg_age + hh_ed_avg_yrs + inc_farm1 + inc_manual1 +
inc_domstc1 + lofftrtime + redland,
data = training,
#trControl=trainControl(method="cv",number=5),
#prox = TRUE,
metric = "Kappa",
method = "rpart"))
confusionMatrix(pred, test_data$parc_2cer)
# Evaluating our Model on Our Predictions
pred <- predict(mod_rf, test_data)
confusionMatrix(pred, test_data$parc_2cer)
#==================================================================================================
# Ben Ewing - 3/15/2016
#
# This script is meant to demonstrate some of the capabilities of the Caret package, and the
# random forests method
#
#==================================================================================================
#==================================================================================================
# Setup
# Clear Environments
rm(list=ls())
# Set Working Directory
setwd("")
# Import data
load(url("https://github.com/cloudburst-ltnrm/worldbank-rf/raw/master/datasets/usaid_data.rdata"))
# Libraries
# Plyr has a number of useful functions
library(plyr)
# Caret of course
library(caret)
# ggplot2 for plots
library(ggplot2)
# randomForest for...random forests
library(randomForest)
# rattle for fancyRpartPlot
library(rattle)
#==================================================================================================
#==================================================================================================
# Ben Ewing - 3/15/2016
#
# This script is meant to demonstrate some of the capabilities of the Caret package, and the
# random forests method
#
#==================================================================================================
#==================================================================================================
# Setup
# Clear Environments
rm(list=ls())
# Set Working Directory
# setwd("")
# Import data
load(url("https://github.com/cloudburst-ltnrm/worldbank-rf/raw/master/datasets/usaid_data.rdata"))
# Libraries
# Plyr has a number of useful functions
library(plyr)
# Caret of course
library(caret)
# ggplot2 for plots
library(ggplot2)
# randomForest for...random forests
library(randomForest)
# rattle for fancyRpartPlot
library(rattle)
#==================================================================================================
#==================================================================================================
# R Basics
# See the dimensions
dim(eerf)
# see the first couple rows
head(eerf)
# See variables and their types
str(eerf, list.len = ncol(eerf))
# We have to specify how many vars to show using the list.len arg
# We can also get some basic stats, of course
mean(eerf$hh_income)
sd(eerf$hh_income)
summary(eerf$hh_income)
qplot(eerf$region_id, eerf$hh_income, geom = "jitter")
#==================================================================================================
#==================================================================================================
# Set up testing data and training data
set.seed(3456)
trainIndex <- createDataPartition(y = eerf$parc_2cer, p = 0.8, list = F)
train_data <- eerf[trainIndex,]
test_data  <- eerf[-trainIndex,]
#==================================================================================================
#==================================================================================================
# Training Model
system.time(mod_demo_rpart <- train(parc_2cer ~ state_id + hh_size + inc_farm1 + inc_manual1 +
inc_domstc1 + lofftrtime + redland,
data = train_data,
metric = "Kappa",
method = "rpart"))
fancyRpartPlot(mod_demo_rpart$finalModel)
mod_demo_rpart
mod_demo_rpart$finalModel
system.time(mod_rf1 <- train(parc_2cer ~ .,
data = train_data,
metric = "Kappa",
method = "rf"))
#==================================================================================================
# Ben Ewing - 3/15/2016
#
# This script is meant to demonstrate some of the capabilities of the Caret package, and the
# random forests method
#
#==================================================================================================
#==================================================================================================
# Setup
# Clear Environments
rm(list=ls())
# Set Working Directory
# setwd("")
# Import data
load(url("https://github.com/cloudburst-ltnrm/worldbank-rf/raw/master/datasets/usaid_data.rdata"))
# Libraries
# Plyr has a number of useful functions
library(plyr)
# Caret of course
library(caret)
# ggplot2 for plots
library(ggplot2)
# randomForest for...random forests
library(randomForest)
# rattle for fancyRpartPlot
library(rattle)
#==================================================================================================
#==================================================================================================
# R Basics
# See the dimensions
dim(eerf)
# see the first couple rows
head(eerf)
# See variables and their types
str(eerf, list.len = ncol(eerf))
# We have to specify how many vars to show using the list.len arg
# We can also get some basic stats, of course
mean(eerf$hh_income)
sd(eerf$hh_income)
summary(eerf$hh_income)
qplot(eerf$region_id, eerf$hh_income, geom = "jitter")
#==================================================================================================
#==================================================================================================
# Set up testing data and training data
set.seed(3456)
trainIndex <- createDataPartition(y = eerf$parc_2cer, p = 0.8, list = F)
train_data <- eerf[trainIndex,]
test_data  <- eerf[-trainIndex,]
#==================================================================================================
#==================================================================================================
# Training Model
system.time(mod_demo_rpart <- train(parc_2cer ~ state_id + hh_size + inc_farm1 + inc_manual1 +
inc_domstc1 + lofftrtime + redland,
data = train_data,
method = "rpart"))
fancyRpartPlot(mod_demo_rpart$finalModel)
mod_demo_rpart
mod_demo_rpart$finalModel
system.time(mod_rf1 <- train(parc_2cer ~ .,
data = train_data,
method = "rf"))
